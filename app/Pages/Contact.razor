@using System.ComponentModel.DataAnnotations;
@inject IJSRuntime _jsRuntime
@inject HttpClient Http
@page "/signup"

<h3>Let's Connect</h3>
<p>
    Sign up to get notified of new content as it's released. Always free, always top-notch. Rest assured knowing I'll keep your data tight and on lock.
</p>
    @* https://blazor-university.com/forms/handling-form-submission/ *@
    <EditForm class="form-group" Model="@contact" OnValidSubmit="@ValidFormSubmitted">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputText label="FirsName" id="FirstName" placeholder="John" @bind-Value="contact.FirstName" />
        <br />
        <InputText  id="LastName" placeholder="Doe" @bind-Value="contact.LastName" />
        <br />
        <InputText id="Email" placeholder="John.Doe@gmail.com" @bind-Value="contact.Email" />
        <br />
        <InputText id="Phone" placeholder="222-333-4455" @bind-Value="contact.PhoneNumber" />
        <br />
        <InputTextArea id="Message" name="Message" placeholder="Share some love" @bind-Value="contact.Message" />
        <br />
        @if (Loading == false || FormResult != "")
        {
            <button class="btn btn-primary">Sign Up</button>
        }
        else{
            <LoadingButton Title="Sending"/>        
        }
        
    </EditForm>

@if (FormResult == "true")
{
    Loading = false;
    FormResult = "";
    <br />
    <br />
    <h6 style="color: green;">Thank you. I'll be in touch soon.</h6>
    OnEventAdded.Invoke();
}
@if((FormResult == "false"))
{
    Loading = false;
    FormResult = "";
    <br />
    <br />
    <h6 style="color: red;">Our records indicate @contact.Email is already registered.</h6>
    OnEventAdded.Invoke();

}

@code{

    public ContactModel contact = new ContactModel();
    public string FormResult = "";
    public bool Loading = false;

    // Configure event that other pages and components can subscribe to not being used
    public static event Action OnEventAdded = () => { };
    
    // Removes loading animation from dom
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeVoidAsync("removeloader");
        await _jsRuntime.InvokeVoidAsync("Prism.highlightAll");
    }

    // Return Task for view to update
    protected async Task ValidFormSubmitted(EditContext editContext)
    {
        Loading = true;
        ContactModel C = (ContactModel)editContext.Model;
        string url = "https://qt9yfmkihi.execute-api.us-east-1.amazonaws.com/prod/contacts";
        HttpResponseMessage response = await Http.PostAsJsonAsync(url, C);
        FormResult = await response.Content.ReadAsStringAsync();

    }
    public class ContactModel
    {
        [Required] 
        public string FirstName { get; set; }
        [Required] 
        public string LastName { get; set; }
        [Required]
        [EmailAddress] 
        public string Email { get; set; }
        [Required]
        [Phone] 
        public string PhoneNumber { get; set; }
        public string Message { get; set; }
        
    }
}